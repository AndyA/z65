REM Floating point storage
REM Andy Armstrong <andy@hexten.net>

oswrch      = &FFEE
osnewl      = &FFE7

var_base    = &480

ZP%         = &70

vp          = FNzp(2)
acc0        = FNzp(4)

DIM var_name 255

code_size% = 300
DIM code code_size% + 200

FOR pass = 0 TO 2 STEP 2
P% = code
[OPT pass

.debug        PHA
              LDA vp + 1
              JSR hexbyte
              LDA vp + 0
              JSR hexbyte
              PLA
              RTS

.find_var     LDA var_name
              SEC
              SBC #ASC"@"
              ASL A
              ADC #var_base MOD 256
              STA vp + 0
              LDA #0
              ADC #var_base DIV 256
              STA vp + 1

.fv1          LDA vp + 1
              ORA vp + 0
              BEQ fv6
              LDY #2
.fv2          LDA var_name - 1, Y
              CMP (vp), Y
              BNE fv3
              INY
              BNE fv2
.fv3          CMP #&0D
              BNE fv4
              LDA (vp), Y
              BEQ fv5
.fv4          LDY #0
              LDA (vp), Y
              PHA
              INY
              LDA (vp), Y
              STA vp + 1
              PLA
              STA vp + 0
              JMP fv1

.fv5          INY
              CLC
              TYA
              ADC vp + 0
              TAX
              LDA vp + 1
              ADC #0
              TAY
              RTS

.fv6          SEC
              RTS

.vchain       TXA
              SEC
              SBC #ASC"@"
              ASL A
              TAY
              LDA var_base + 0, Y
              STA vp + 0
              LDA var_base + 1, Y
              STA vp + 1
.vc1          LDA vp + 1
              BEQ vc4
              JSR debug
              LDA #ASC" "
              JSR oswrch
              TXA
              JSR oswrch
              LDY #2
.vc2          LDA (vp), Y
              CMP #32
              BCC vc3
              JSR oswrch
              INY
              BNE vc2
.vc3          JSR pad
              JSR hd16
              JSR osnewl
              LDY #0
              LDA (vp), Y
              PHA
              INY
              LDA (vp), Y
              STA vp + 1
              PLA
              STA vp + 0
              JMP vc1
.vc4          RTS

.pad          TYA
              PHA
              LDA #ASC" "
.pad1         JSR oswrch
              INY
              CPY #16
              BCC pad1
              PLA
              TAY
              RTS

.hd16         JSR hd8
.hd8          JSR hd4
.hd4          JSR hd2
.hd2          JSR hd1
.hd1          LDA #ASC" "
              JSR oswrch
              LDA (vp), Y
              INY
              JMP hexbyte
      

.vars         LDX #ASC"A"
.va1          JSR vchain
              INX
              CPX #ASC"Z" + 1
              BCC va1
              LDX #ASC"a"
.va2          JSR vchain
              INX
              CPX #ASC"z" + 1
              BCC va2
              RTS

.hexbyte      PHA
              LSR A : LSR A : LSR A : LSR A
              JSR hexnyb
              PLA
.hexnyb       PHA
              AND #15
              CLC
              ADC #ASC"0"
              CMP #ASC"9" + 1
              BCC hexnyb1
              ADC #ASC"a" - ASC"9" - 2
.hexnyb1      JSR oswrch
              PLA
              RTS

.hexword      PHA
              LDA acc0 + 3
              JSR hexbyte
              LDA acc0 + 2
              JSR hexbyte
              LDA acc0 + 1
              JSR hexbyte
              LDA acc0 + 0
              JSR hexbyte
              PLA
              RTS

.endian       LDA acc0 + 0
              LDX acc0 + 3
              STA acc0 + 3
              STX acc0 + 0
              LDA acc0 + 1
              LDX acc0 + 2
              STA acc0 + 2
              STX acc0 + 1
              RTS

]
NEXT
PRINT "[36mCode size: "; P% - code; ", allocated: "; code_size%; "[0m"
IF P% - code > code_size% THEN PRINT "[31mCode overflow![0m" : STOP

REPEAT
  READ value$
  value = EVAL value$
  PROCfloat(value$, value)
UNTIL value = 0

END

DATA 1.99999999, 2, 2.00000001
DATA PI, PI + 0.00000001, PI - 0.00000001
DATA 1.234E37, 1.234E-37
DATA 0.5, 1, 2, -0.5, -1, -2, 10 ^ 10, 2 ^ 10
DATA 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
DATA -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17
DATA 0

DEF PROCfloat(label$, num)
  LOCAL ABC, @%, res%, mant%, exp%, add%, I%
  @% = 0
  $var_name = "ABC"
  ABC=num
  res% = USR find_var
  IF res% AND &01000000 THEN STOP
  addr% = (res% DIV 256) AND &FFFF
  PRINT "TC(0x";
  A% = ?addr% : CALL hexbyte
  PRINT ", 0x";
  !acc0 = addr%!1 : CALL endian : CALL hexword
  PRINT ", "; FNnum(num); "), // "; label$
ENDPROC

DEF FNnum(num)
  LOCAL rep$, e%
  rep$ = STR$(num)
  e% = INSTR(rep$, "E")
  IF e% = 0 THEN =rep$
  IF MID$(rep$, e% + 1, 1) = "-" THEN =LEFT$(rep$, e%-1) + "e" + MID$(rep$, e%+1)
=LEFT$(rep$, e%-1) + "e+" + MID$(rep$, e%+1)

DEF FNzp(size%)
  LOCAL S%
  S% = ZP%
  ZP% = ZP% + size%
  IF ZP% >= &90 THEN STOP
=S%

DEF FNprstr(msg$)
  [OPT pass
    JSR prstr
    EQUS msg$
    EQUB 0
  ]
=""
