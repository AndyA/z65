REM Hilbert Curve / Fat graphics
REM Turns out BBC Basic is UTF-8 safe
REM Andy Armstrong <andy@hexten.net>

oswrch      = &FFEE
osnewl      = &FFE7
zig_trace   = &FE90

ZP%         = &70

scratch     = FNzp(2)
tmp         = FNzp(4)
row_a       = FNzp(2)
row_b       = FNzp(2)
buf         = FNzp(8)
count       = FNzp(1)
last_x      = FNzp(1)
last_y      = FNzp(1)

q_in        = FNzp(2)
q_out       = FNzp(2)
generation  = FNzp(1)
flood_col   = FNzp(1)

height      = 70
width       = 72

q_size%     = 300 * 3 : REM 3 bytes per entry
q_in%       = 0
q_out%      = 0

DIM code 1500
DIM screen 8191

DIM queue q_size% - 1

FOR pass = 0 TO 2 STEP 2
P% = code
[OPT pass


.putwide    STA tmp
            ASL A
            ORA tmp
.putdot     STX tmp
            AND #&0F
            TAX
            BEQ putdot2
            LDA #&E2
            JSR oswrch
            LDA #&96
            JSR oswrch
            LDA dots, X
.putdot1    JSR oswrch
            LDX tmp
            RTS

.putdot2    LDA #ASC" "
            BNE putdot1

.dots       EQUB &20 : EQUB &98 : EQUB &9D : EQUB &80
            EQUB &96 : EQUB &8C : EQUB &9E : EQUB &9B
            EQUB &97 : EQUB &9A : EQUB &90 : EQUB &9C
            EQUB &84 : EQUB &99 : EQUB &9F : EQUB &88

.initscreen LDA #screen MOD 256
            STA row_a + 0
            CLC
            ADC #32
            STA row_b + 0
            LDA #screen DIV 256
            STA row_a + 1
            ADC #0
            STA row_b + 1
            LDA #height DIV 2
            STA count
            RTS

.nextrow    JSR osnewl
            LDX #row_a : JSR add64
            LDX #row_b : JSR add64
            DEC count
            RTS

.add64      CLC
            LDA 0, X
            ADC #64
            STA 0, X
            BCC add641
            INC 1, X
.add641     RTS

.showscreen JSR initscreen
.shows0     LDY #0
.shows1     LDA (row_a), Y \ top half of character
            LDX #3
.shows2     PHA
            AND #&03
            STA buf, X
            PLA
            LSR A : LSR A
            DEX
            BPL shows2
            LDA (row_b), Y \ bottom half of character
            LDX #3
.shows3     PHA
            ASL A : ASL A
            ORA buf, X
            JSR putdot
            PLA
            LSR A : LSR A
            DEX
            BPL shows3
            INY
            CPY #width DIV 8
            BCC shows1
            JSR nextrow
            BNE shows0
            RTS

.showwide   JSR initscreen
.showw0     LDY #0
.showw1     LDA (row_a), Y \ top half of character
            LDX #7
.showw2     PHA
            AND #&01
            STA buf, X
            PLA
            LSR A
            DEX
            BPL showw2
            LDA (row_b), Y \ bottom half of character
            LDX #7
.showw3     PHA
            AND #&01
            ASL A : ASL A
            ORA buf, X
            JSR putwide
            PLA
            LSR A
            DEX
            BPL showw3
            INY
            CPY #width DIV 8
            BCC showw1
            JSR nextrow
            BNE showw0
            RTS

.clear      LDY #screen MOD 256
            STY row_a + 0
            LDY #screen DIV 256
            STY row_a + 1
            LDY #0
            LDX #32
.cl1        STA (row_a), Y
            INY
            BNE cl1
            INC row_a + 1
            DEX
            BNE cl1
            RTS

.pixaddr    STX tmp + 0
            STY tmp + 1
            TXA
            STY row_a + 1
            LSR row_a + 1 : ROR A
            LSR row_a + 1 : ROR A
            LSR row_a + 1 : ROR A
            CLC
            ADC #screen MOD 256
            STA row_a + 0
            LDA row_a + 1
            ADC #screen DIV 256
            STA row_a + 1
            TXA
            AND #&07
            TAX
            LDA bits, X
            LDX #0
            RTS

.bits       EQUB &01 : EQUB &02 : EQUB &04 : EQUB &08
            EQUB &10 : EQUB &20 : EQUB &40 : EQUB &80

\ Get the pixel at X, Y. Result in A (0 or 1)
.getpix     JSR pixaddr
            AND (row_a, X)
            BEQ setpix5
            LDA #1
            BNE setpix5

\ Set the pixel at X, Y to A
\   0 => clear
\   1 => set
\   2 => invert
.setpix     PHA
            CMP #0
            BNE setpix1
            JSR pixaddr
            EOR #&FF
            AND (row_a, X)
            BCC setpix3

.setpix1    CMP #1
            BNE setpix2
            JSR pixaddr
            ORA (row_a, X)
            BCC setpix3

.setpix2    CMP #2
            BNE setpix4
            JSR pixaddr
            EOR (row_a, X)
.setpix3    STA (row_a, X)
.setpix4    PLA
.setpix5    LDX tmp + 0
            LDY tmp + 1
            RTS

\ Draw a line from last_x, last_y to X, Y
\ Colour (0 or 1) in A
\
\ We're interested in four cases:
\  shallow +X +Y
\  shallow +X -Y
\  steep   +X +Y
\  steep   -X +Y
.draw       STA buf + 0
            TXA
            PHA
            SEC
            SBC last_x
            BCS draw1
            EOR #&FF
            ADC #1
.draw1      STA buf + 1 \ dX
            TYA
            PHA
            SEC
            SBC last_y
            BCS draw2
            EOR #&FF
            ADC #1
.draw2      STA buf + 2 \ dY
            PHA
            CLC
            ADC buf + 1
            ROR A
            STA count
            PLA
            CMP buf + 1
            BCS draw8 \ dY >= dX

\ Shallow
            CPX last_x
            BCC draw3
            JSR swapends
.draw3      INC last_x \ make end cond easier
            CPY last_y
            BCS draw6 \ Down

\ Shallow up
.draw4      LDA buf + 0
            JSR setpix
            LDA count
            SEC
            SBC buf + 2
            BCS draw5
            ADC buf + 1
            INY
.draw5      STA count
            INX
            CPX last_x
            BCC draw4
            BCS drawX

\ Shallow down
.draw6      LDA buf + 0
            JSR setpix
            LDA count
            SEC
            SBC buf + 2
            BCS draw7
            ADC buf + 1
            DEY
.draw7      STA count
            INX
            CPX last_x
            BCC draw6
            BCS drawX

\ Steep
.draw8      CPY last_y
            BCC draw9
            JSR swapends
.draw9      INC last_y
            CPX last_x
            BCS draw12 \ Left

\ Steep right
.draw10     LDA buf + 0
            JSR setpix
            LDA count
            SEC
            SBC buf + 1
            BCS draw11
            ADC buf + 2
            INX
.draw11     STA count
            INY
            CPY last_y
            BCC draw10
            BCS drawX

\ Steep left
.draw12     LDA buf + 0
            JSR setpix
            LDA count
            SEC
            SBC buf + 1
            BCS draw13
            ADC buf + 2
            DEX
.draw13     STA count
            INY
            CPY last_y
            BCC draw12

.drawX      PLA
            TAY
            PLA
            TAX
            LDA buf + 0

\ Move to X, Y
.move       STX last_x
            STY last_y
            RTS

.swapends   LDA last_x
            STX last_x
            TAX
            LDA last_y
            STY last_y
            TAY
            RTS

\ Queue stuff

\ Reset the queue
.qreset     PHA
            TXA
            PHA
            LDX #q_in
            JSR qinit
            LDX #q_out
            JSR qinit
            PLA
            TAX
            PLA
            RTS

.qinit      LDA #queue MOD 256
            STA 0, X
            LDA #queue DIV 256
            STA 1, X
            RTS

.qinc       CLC
            LDA 0, X
            ADC #3
            STA 0, X
            BCC qinc1
            INC 1, X
.qinc1      CMP #(queue + q_size%) MOD 256
            LDA 1, X
            SBC #(queue + q_size%) DIV 256
            BCC qinc2
            LDA 0, X
            SBC #q_size% MOD 256
            STA 0, X
            LDA 1, X
            SBC #q_size% DIV 256
            STA 1, X
.qinc2      RTS

\ Check for queue empty / full
.qempty     LDA q_in + 0
            CMP q_out + 0
            BNE qshift1
            LDA q_in + 1
            CMP q_out + 1
            BNE qshift1
            SEC
            RTS

\ Append A, X, Y to queue. C = 1 if full
.qpush      PHA
            TXA
            PHA
            TYA
            PHA
            TYA \ Y
            LDY #2
            STA (q_in), Y
            TXA \ X
            DEY
            STA (q_in), Y
            TSX
            LDA &103, X \ A
            DEY
            STA (q_in), Y
            LDX #q_in
            JSR qinc
            JSR qempty
            PLA
            TAY
            PLA
            TAX
            PLA
            RTS

\ Shift A, X, Y from queue. C = 1 if empty
.qshift     JSR qempty
            BCS qshift2
            LDY #0
            LDA (q_out), Y \ A
            PHA
            INY
            LDA (q_out), Y \ X
            PHA
            INY
            LDA (q_out), Y \ Y
            PHA
            LDX #q_out
            JSR qinc
            PLA
            TAY
            PLA
            TAX
            PLA
.qshift1    CLC
.qshift2    RTS

\ If the pixel at X, Y needs to be filled fill it and
\ queue it for more filling.
.fillpix    JSR getpix
            CMP flood_col
            BEQ qshift1
            LDA flood_col
            JSR setpix
            LDA generation
            JMP qpush

\ Try filling the pixels around X, Y
.tryfill    CPY #0
            BEQ tf2
            DEY
            JSR fillpix : BCS tf7
            INY
.tf2        INY : BEQ tf3
            JSR fillpix : BCS tf7
.tf3        DEY
            CPX #0
            BEQ tf5
            DEX
            JSR fillpix : BCS tf7
            INX
.tf5        INX
            BEQ tf6
            JSR fillpix : BCS tf7
.tf6        DEX
            CLC
.tf7        RTS

\ Start a flood fill at X, Y with colour A (0 or 1)
.flood_init STA flood_col
            JSR setpix
            JSR qreset
            LDA #0
            STA generation
            JMP qpush

\ Perform a generation of the fill. C = 1 if queue full or empty
.flood_gen  INC generation
.fg1        JSR qempty
            BCS tf7
            LDY #0
            LDA (q_out), Y
            CMP generation
            BEQ qshift1
            JSR qshift
            BCS tf7
            JSR tryfill
            BCS tf7
            BCC fg1

\ Debug / printing etc

.debug_t    JSR trace
.debug      PHP
            PHA
            JSR prstr : EQUS "X=" : EQUB 0
            TXA : JSR prdec
            JSR prstr : EQUS ", Y=" : EQUB 0
            TYA : JSR prdec
            JSR prstr : EQUS ", gen=" : EQUB 0
            LDA generation : JSR prdec
            JSR osnewl
            PLA
            PLP
            RTS

.prstr      PLA
            STA scratch + 0
            PLA
            STA scratch + 1
            TYA
            PHA
            LDY #0
.prstr1     INC scratch + 0
            BNE prstr2
            INC scratch + 1
.prstr2     LDA (scratch), Y
            BEQ prstr3
            JSR oswrch
            JMP prstr1
.prstr3     PLA
            TAY
            LDA scratch + 1
            PHA
            LDA scratch + 0
            PHA
            RTS

.prdec      PHA
            STA scratch + 0
            TXA
            PHA
            LDA #0
            PHA
.prdec1     LDX #8
            LDA #0
.prdec2     ASL scratch + 0
            ROL A
            CMP #10
            BCC prdec3
            SBC #10
            INC scratch + 0
.prdec3     DEX
            BNE prdec2
            CLC
            ADC #ASC"0"
            PHA
            LDA scratch + 0
            BNE prdec1
.prdec4     PLA
            BEQ prdec5
            JSR oswrch
            JMP prdec4
.prdec5     PLA
            TAX
            PLA
            RTS

.trace      STA scratch + 0
            PHP : PLA : STA scratch + 1
            PLA : STA scratch + 2
            PLA : STA scratch + 3
            LDA zig_trace : PHA
            LDA #(trace_x - 1) DIV 256 : PHA
            LDA #(trace_x - 1) MOD 256 : PHA
            LDA scratch + 3 : PHA
            LDA scratch + 2 : PHA
            LDA #1 : STA zig_trace
            LDA scratch + 1 : PHA
            LDA scratch + 0
            PLP
            RTS

.trace_x    STA scratch + 0
            PHP : PLA : STA scratch + 1
            PLA : STA zig_trace
            LDA scratch + 1 : PHA
            LDA scratch + 0
            PLP
            RTS

]
NEXT
PRINT "Code size: "; P% - code
PROChilbert
END

DEF PROChilbert
  LOCAL A%, X%, Y%
  A% = 255 : CALL clear
  init% = TRUE

  PROChil(0, 0, 0, 0, 1, 1, 0, 5)

  A% = 0 : X% =  4 : Y% = 2 : CALL move
  Y% = 1 : CALL draw
  X% = 66 : CALL draw
  Y% = 2 : CALL draw

  CALL showwide
ENDPROC

DEF PROCfill(A%, X%, Y%)
  LOCAL max_queue%, qsize%
  PROChilbert
  CALL flood_init
  REPEAT
    qsize% = FNqsize DIV 3
    IF qsize% > max_queue% THEN max_queue% = qsize%
    PRINT "Generation "; ?generation; ", queue: "; qsize%
    CALL showwide
    INPUT X$ : IF X$ <> "" THEN ENDPROC
  UNTIL USR flood_gen AND &01000000
  PRINT "Generation "; ?generation; " max_queue: "; max_queue%
  CALL showwide
ENDPROC

DEF PROCrand
  LOCAL X%, Y%
  REPEAT
    X% = RND(width) - 1
    Y% = RND(height) - 1
  UNTIL (((USR getpix) AND &FF) = 1)
  PROCfill(0, X%, Y%)
ENDPROC

DEF FNqsize
  LOCAL in%, out%
  in% = !q_in AND &FFFF
  out% = !q_out AND &FFFF
  IF in% < out% THEN =in% - out% + q_size%
=in% - out%

DEF FNzp(size%)
  LOCAL S%
  S% = ZP%
  ZP% = ZP% + size%
  IF ZP% >= &90 THEN STOP
=S%

DEF PROCline(A%, X%, Y%)
  IF init% THEN CALL move : init% = FALSE ELSE CALL draw
ENDPROC

DEF PROCseg(A%, x, y)
  PROCline(A%, 3 + x * 64, 2 + y * 64)
ENDPROC

DEF PROChil(A%, x, y, xi, xj, yi, yj, n)
  IF n <= 0 THEN PROCseg(A%, x + (xi + yi) / 2, y + (xj + yj) / 2) : ENDPROC
  PROChil(A%, x,           y,           yi/2, yj/2,  xi/2,  xj/2, n-1)
  PROChil(A%, x+xi/2,      y+xj/2 ,     xi/2, xj/2,  yi/2,  yj/2, n-1)
  PROChil(A%, x+xi/2+yi/2, y+xj/2+yj/2, xi/2, xj/2,  yi/2,  yj/2, n-1)
  PROChil(A%, x+xi/2+yi,   y+xj/2+yj,  -yi/2,-yj/2, -xi/2, -xj/2, n-1)
ENDPROC
