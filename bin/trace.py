import json
import re
import sys
from dataclasses import dataclass
from functools import cached_property
from typing import Self


@dataclass(frozen=True)
class KW:
    keyword: str
    token: int
    flags: int
    addr: int = 0


KEYWORDS = [
    KW("AND", 0x80, 0x00),
    KW("ABS", 0x94, 0x00, 0xE571),
    KW("ACS", 0x95, 0x00, 0xE0E5),
    KW("ADVAL", 0x96, 0x00, 0xE349),
    KW("ASC", 0x97, 0x00, 0xE464),
    KW("ASN", 0x98, 0x00, 0xE0EB),
    KW("ATN", 0x99, 0x00, 0xE118),
    KW("AUTO", 0xC6, 0x10, 0xC8C7),
    KW("BGET", 0x9A, 0x01, 0xF772),
    KW("BPUT", 0xD5, 0x03, 0xF75B),
    KW("COLOUR", 0xFB, 0x02, 0xCBA9),
    KW("CALL", 0xD6, 0x02, 0xC6ED),
    KW("CHAIN", 0xD7, 0x02, 0xF72D),
    KW("CHR$", 0xBD, 0x00, 0xEBC1),
    KW("CLEAR", 0xD8, 0x01, 0xCAA8),
    KW("CLOSE", 0xD9, 0x03, 0xF79C),
    KW("CLG", 0xDA, 0x01, 0xC6D8),
    KW("CLS", 0xDB, 0x01, 0xC6DF),
    KW("COS", 0x9B, 0x00, 0xE19E),
    KW("COUNT", 0x9C, 0x01, 0xE6DE),
    KW("COLOR", 0xFB, 0x02, 0xCBA9),
    KW("DATA", 0xDC, 0x20, 0xC398),
    KW("DEG", 0x9D, 0x00, 0xE38F),
    KW("DEF", 0xDD, 0x00, 0xC398),
    KW("DELETE", 0xC7, 0x10, 0xC74C),
    KW("DIV", 0x81, 0x00),
    KW("DIM", 0xDE, 0x02, 0xC94A),
    KW("DRAW", 0xDF, 0x02, 0xCC03),
    KW("ENDPROC", 0xE1, 0x01, 0xCB71),
    KW("END", 0xE0, 0x01, 0xC2E6),
    KW("ENVELOPE", 0xE2, 0x02, 0xEC76),
    KW("ELSE", 0x8B, 0x14),
    KW("EVAL", 0xA0, 0x00, 0xE3B1),
    KW("ERL", 0x9E, 0x01, 0xE6EE),
    KW("ERROR", 0x85, 0x04, 0xE9D2),
    KW("EOF", 0xC5, 0x01, 0xE480),
    KW("EOR", 0x82, 0x00),
    KW("ERR", 0x9F, 0x01, 0xE6F4),
    KW("EXP", 0xA1, 0x00, 0xE2A7),
    KW("EXT", 0xA2, 0x01, 0xF749),
    KW("FOR", 0xE3, 0x02, 0xEFC7),
    KW("FALSE", 0xA3, 0x01, 0xE499),
    KW("FN", 0xA4, 0x08, 0xE999),
    KW("GOTO", 0xE5, 0x12, 0xF0CF),
    KW("GET$", 0xBE, 0x00, 0xE7C3),
    KW("GET", 0xA5, 0x00, 0xE7BD),
    KW("GOSUB", 0xE4, 0x12, 0xF08B),
    KW("GCOL", 0xE6, 0x02, 0xCB95),
    KW("HIMEM", 0x93, 0x43, 0xE6E8),
    KW("INPUT", 0xE8, 0x02, 0xF247),
    KW("IF", 0xE7, 0x02, 0xD0DD),
    KW("INKEY$", 0xBF, 0x00, 0xE82A),
    KW("INKEY", 0xA6, 0x00, 0xE473),
    KW("INT", 0xA8, 0x00, 0xE441),
    KW("INSTR(", 0xA7, 0x00, 0xE4E9),
    KW("LIST", 0xC9, 0x10, 0xED9F),
    KW("LINE", 0x86, 0x00, 0xB900),
    KW("LOAD", 0xC8, 0x02, 0xF727),
    KW("LOMEM", 0x92, 0x43, 0xE6E2),
    KW("LOCAL", 0xEA, 0x02, 0xCB3E),
    KW("LEFT$(", 0xC0, 0x00, 0xE7D0),
    KW("LEN", 0xA9, 0x00, 0xE6C8),
    KW("LET", 0xE9, 0x04, 0xC3FF),
    KW("LOG", 0xAB, 0x00, 0xE377),
    KW("LN", 0xAA, 0x00, 0xE014),
    KW("MID$(", 0xC1, 0x00, 0xE83D),
    KW("MODE", 0xEB, 0x02, 0xCBB5),
    KW("MOD", 0x83, 0x00, 0xE745),
    KW("MOVE", 0xEC, 0x02, 0xCBFF),
    KW("NEXT", 0xED, 0x02, 0xEE98),
    KW("NEW", 0xCA, 0x01, 0xC2F5),
    KW("NOT", 0xAC, 0x00, 0xE357),
    KW("OLD", 0xCB, 0x01, 0xC2D4),
    KW("ON", 0xEE, 0x02, 0xF118),
    KW("OFF", 0x87, 0x00),
    KW("OR", 0x84, 0x00, 0xDB4D),
    KW("OPENIN", 0x8E, 0x00, 0xF77B),
    KW("OPENOUT", 0xAE, 0x00, 0xF77F),
    KW("OPENUP", 0xAD, 0x00, 0xF783),
    KW("OSCLI", 0xFF, 0x02, 0xF6C5),
    KW("PRINT", 0xF1, 0x02, 0xC5B8),
    KW("PAGE", 0x90, 0x43, 0xE6BF),
    KW("PTR", 0x8F, 0x43, 0xF74A),
    KW("PI", 0xAF, 0x01, 0xE396),
    KW("PLOT", 0xF0, 0x02, 0xCC0C),
    KW("POINT(", 0xB0, 0x00, 0xE4C0),
    KW("PROC", 0xF2, 0x0A, 0xCB1F),
    KW("POS", 0xB1, 0x01, 0xE368),
    KW("RETURN", 0xF8, 0x01, 0xF0B9),
    KW("REPEAT", 0xF5, 0x00, 0xF3E7),
    KW("REPORT", 0xF6, 0x01, 0xF7DB),
    KW("READ", 0xF3, 0x02, 0xF322),
    KW("REM", 0xF4, 0x20, 0xC398),
    KW("RUN", 0xF9, 0x01, 0xF514),
    KW("RAD", 0xB2, 0x00, 0xE37E),
    KW("RESTORE", 0xF7, 0x12, 0xF2E9),
    KW("RIGHT$(", 0xC2, 0x00, 0xE7F2),
    KW("RND", 0xB3, 0x01, 0xE745),
    KW("RENUMBER", 0xCC, 0x10, 0xC7BE),
    KW("STEP", 0x88, 0x00, 0xEE49),
    KW("SAVE", 0xCD, 0x02, 0xF6F6),
    KW("SGN", 0xB4, 0x00, 0xE4A6),
    KW("SIN", 0xB5, 0x00, 0xE1A9),
    KW("SQR", 0xB6, 0x00, 0xDFCA),
    KW("SPC", 0x89, 0x00),
    KW("STR$", 0xC3, 0x00, 0xE898),
    KW("STRING$(", 0xC4, 0x00, 0xE8C6),
    KW("SOUND", 0xD4, 0x02, 0xEC50),
    KW("STOP", 0xFA, 0x01, 0xC2EE),
    KW("TAN", 0xB7, 0x00, 0xDED4),
    KW("THEN", 0x8C, 0x14),
    KW("TO", 0xB8, 0x00, 0xE6B0),
    KW("TAB(", 0x8A, 0x00),
    KW("TRACE", 0xFC, 0x12, 0xCAB0),
    KW("TIME", 0x91, 0x43, 0xE6FA),
    KW("TRUE", 0xB9, 0x01, 0xE48C),
    KW("UNTIL", 0xFD, 0x02, 0xF3B4),
    KW("USR", 0xBA, 0x00, 0xE39D),
    KW("VDU", 0xEF, 0x02, 0xCC4A),
    KW("VAL", 0xBB, 0x00, 0xE3FA),
    KW("VPOS", 0xBC, 0x01, 0xE36E),
    KW("WIDTH", 0xFE, 0x02, 0xECA4),
    KW("PAGE=", 0xD0, 0x00, 0xCA9E),
    KW("PTR=", 0xCF, 0x00, 0xF733),
    KW("TIME=", 0xD1, 0x00, 0xCAE4),
    KW("LOMEM=", 0xD2, 0x00, 0xCA8A),
    KW("HIMEM=", 0xD3, 0x00, 0xCA78),
]

KW_BY_ADDR: dict[int, list[KW]] = {}
for kw in KEYWORDS:
    if kw.addr != 0:
        KW_BY_ADDR.setdefault(kw.addr, []).append(kw)


@dataclass(kw_only=True, frozen=True)
class ListingLine:
    text: str

    @cached_property
    def address(self) -> int:
        return int(self.text[0:4], 16)

    @cached_property
    def bytes(self) -> list[int]:
        return [int(byte, 16) for byte in self.text[7:18].split()]

    @cached_property
    def source(self) -> str:
        return self.text[18:]


@dataclass(kw_only=True, frozen=True)
class Listing:
    lines: list[ListingLine]

    @classmethod
    def from_lines(cls, lines: list[str]) -> Self:
        return cls(lines=[ListingLine(text=line) for line in lines if line != "\n"])

    @cached_property
    def by_address(self) -> dict[int, ListingLine]:
        return {line.address: line for line in self.lines}


@dataclass(kw_only=True, frozen=True)
class Step:
    pc: int
    p: str
    a: int
    x: int
    y: int
    s: int
    count: int = 0

    def __str__(self) -> str:
        return (
            f"PC: {self.pc:04X} "
            f"P: {self.p} "
            f"A: {self.a:02X} "
            f"X: {self.x:02X} "
            f"Y: {self.y:02X} "
            f"S: {self.s:02X} "
            f"#: {self.count:8d}"
        )


def load_steps(file_name: str) -> list[Step]:
    steps: list[Step] = []
    with open(file_name, "r") as f:
        for line in f:
            if not line.startswith("{"):
                continue
            step = json.loads(line)
            steps.append(Step(**step))
    return steps


with open("ref/hibasic.as65", "r") as f:
    lines = f.readlines()
    listing = Listing.from_lines(lines)

for line in listing.lines:
    text = line.text.strip()
    if kws := KW_BY_ADDR.get(line.address):
        words = [kw.keyword for kw in kws]
        text = re.sub(r"\s*;.*$", "", text)
        text = text.ljust(47) + "; " + " / ".join(words)
    print(text)

if False:
    trace_files = sys.argv[1:]
    for trace_file in trace_files:
        steps = load_steps(trace_file)
        print(f"Loaded {len(steps)} steps from {trace_file}")

        last_pc = None
        for step in steps:
            if last_pc is not None and (step.pc <= last_pc or step.pc > last_pc + 3):
                print()
            last_pc = step.pc
            print(step, end="")
            line = listing.by_address.get(step.pc, None)
            if line := listing.by_address.get(step.pc, None):
                print(f" | {line.text.strip()}", end="")
            print()
